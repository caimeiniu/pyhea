name: CI/CD

on:
  push:
    branches: [ main, master, devel ]
  pull_request:
    branches: [ main, master, devel ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libopenmpi-dev openmpi-bin \
          libegl1 libegl-dev \
          libgl1-mesa-dev libgles2-mesa-dev \
          libglvnd0 libglvnd-dev \
          libx11-6 libx11-dev \
          libxcb1-dev libxkbcommon-x11-0
        git clone https://github.com/pybind/pybind11.git
        cd pybind11
        cmake -S . -B build -DPYBIND11_TEST=OFF
        sudo cmake --install build
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip build wheel setuptools
        pip install pytest pytest-cov flake8 pybind11 psutil numpy scipy matplotlib

    - name: Install PyHEA
      run: |
        python -m build --wheel
        pip install dist/*.whl
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests
      run: |
        pytest tests/ --cov --junitxml=junit.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  build-cpu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libopenmpi-dev openmpi-bin \
          libegl1 libegl-dev \
          libgl1-mesa-dev libgles2-mesa-dev \
          libglvnd0 libglvnd-dev \
          libx11-6 libx11-dev \
          libxcb1-dev libxkbcommon-x11-0
        git clone https://github.com/pybind/pybind11.git
        cd pybind11
        cmake -S . -B build -DPYBIND11_TEST=OFF
        sudo cmake --install build
        python -m pip install --upgrade pip build wheel setuptools
        pip install pybind11 psutil numpy scipy matplotlib

    - name: Build package (CPU)
      run: |
        python -m build --wheel
        ls -l dist/

    - name: Test installation from wheel
      run: |
        pip install dist/*.whl
        python -c "import pyhea; print(pyhea.__version__)"

    - name: Upload wheel artifact
      uses: actions/upload-artifact@v3
      with:
        name: cpu-wheels-py${{ matrix.python-version }}
        path: dist/*.whl

  build-gpu:
    runs-on: ubuntu-latest
    container:
      image: nvidia/cuda:11.8.0-devel-ubuntu22.04

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3

    - name: Install system dependencies
      run: |
        apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get install -y \
          python3-pip python3-dev cmake git \
          libopenmpi-dev openmpi-bin \
          libegl1 libegl-dev \
          libgl1-mesa-dev libgles2-mesa-dev \
          libglvnd0 libglvnd-dev \
          libx11-6 libx11-dev \
          libxcb1-dev libxkbcommon-x11-0
        ln -s /usr/bin/python3 /usr/bin/python

    - name: Install pybind11
      run: |
        git clone https://github.com/pybind/pybind11.git
        cd pybind11
        cmake -S . -B build -DPYBIND11_TEST=OFF
        cmake --install build

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip build wheel setuptools
        pip install pybind11 psutil numpy scipy matplotlib

    - name: Build package (GPU)
      env:
        CUDA_HOME: /usr/local/cuda
        LD_LIBRARY_PATH: /usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
      run: |
        python -m build --wheel
        ls -l dist/

    - name: Test installation from wheel
      run: |
        pip install dist/*.whl
        python -c "import pyhea; print(pyhea.__version__)"

    - name: Upload wheel artifact
      uses: actions/upload-artifact@v3
      with:
        name: gpu-wheels-py${{ matrix.python-version }}
        path: dist/*.whl
